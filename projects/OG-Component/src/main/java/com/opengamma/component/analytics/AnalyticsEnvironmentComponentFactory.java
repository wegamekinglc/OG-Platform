/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */

package com.opengamma.component.analytics;

import java.util.LinkedHashMap;

import org.joda.beans.BeanDefinition;
import org.joda.beans.PropertyDefinition;

import com.opengamma.analytics.env.AnalyticsEnvironment;
import com.opengamma.component.ComponentRepository;
import com.opengamma.component.factory.AbstractComponentFactory;
import com.opengamma.financial.convention.daycount.DayCount;

import java.util.Map;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 * Instantiates and binds an {@link AnalyticsEnvironment} to the current thread.
 */
@BeanDefinition
public class AnalyticsEnvironmentComponentFactory extends AbstractComponentFactory {

  @PropertyDefinition
  private DayCount _modelDayCount;

  @Override
  public void init(ComponentRepository repo, LinkedHashMap<String, String> configuration) throws Exception {
    // Get current value (default if not set)
    AnalyticsEnvironment.Builder builder = AnalyticsEnvironment.getInstance().toBuilder();
    if (getModelDayCount() != null) {
      builder.modelDayCount(getModelDayCount());
    }
    AnalyticsEnvironment analyticsEnvironment = builder.build();
    // Bind to current thread
    AnalyticsEnvironment.setInstance(analyticsEnvironment);
  }
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code AnalyticsEnvironmentComponentFactory}.
   * @return the meta-bean, not null
   */
  public static AnalyticsEnvironmentComponentFactory.Meta meta() {
    return AnalyticsEnvironmentComponentFactory.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(AnalyticsEnvironmentComponentFactory.Meta.INSTANCE);
  }

  @Override
  public AnalyticsEnvironmentComponentFactory.Meta metaBean() {
    return AnalyticsEnvironmentComponentFactory.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the modelDayCount.
   * @return the value of the property
   */
  public DayCount getModelDayCount() {
    return _modelDayCount;
  }

  /**
   * Sets the modelDayCount.
   * @param modelDayCount  the new value of the property
   */
  public void setModelDayCount(DayCount modelDayCount) {
    this._modelDayCount = modelDayCount;
  }

  /**
   * Gets the the {@code modelDayCount} property.
   * @return the property, not null
   */
  public final Property<DayCount> modelDayCount() {
    return metaBean().modelDayCount().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public AnalyticsEnvironmentComponentFactory clone() {
    return JodaBeanUtils.cloneAlways(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      AnalyticsEnvironmentComponentFactory other = (AnalyticsEnvironmentComponentFactory) obj;
      return JodaBeanUtils.equal(getModelDayCount(), other.getModelDayCount()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash = hash * 31 + JodaBeanUtils.hashCode(getModelDayCount());
    return hash ^ super.hashCode();
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("AnalyticsEnvironmentComponentFactory{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  @Override
  protected void toString(StringBuilder buf) {
    super.toString(buf);
    buf.append("modelDayCount").append('=').append(JodaBeanUtils.toString(getModelDayCount())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code AnalyticsEnvironmentComponentFactory}.
   */
  public static class Meta extends AbstractComponentFactory.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code modelDayCount} property.
     */
    private final MetaProperty<DayCount> _modelDayCount = DirectMetaProperty.ofReadWrite(
        this, "modelDayCount", AnalyticsEnvironmentComponentFactory.class, DayCount.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "modelDayCount");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1885988124:  // modelDayCount
          return _modelDayCount;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends AnalyticsEnvironmentComponentFactory> builder() {
      return new DirectBeanBuilder<AnalyticsEnvironmentComponentFactory>(new AnalyticsEnvironmentComponentFactory());
    }

    @Override
    public Class<? extends AnalyticsEnvironmentComponentFactory> beanType() {
      return AnalyticsEnvironmentComponentFactory.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code modelDayCount} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<DayCount> modelDayCount() {
      return _modelDayCount;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1885988124:  // modelDayCount
          return ((AnalyticsEnvironmentComponentFactory) bean).getModelDayCount();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1885988124:  // modelDayCount
          ((AnalyticsEnvironmentComponentFactory) bean).setModelDayCount((DayCount) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
